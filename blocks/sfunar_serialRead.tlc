%% File : sfunar_serialRead.tlc
%%
%% Description: 
%%   Code generation file for sfunar_serialRead
%%

%implements sfunar_serialRead "C"

%include "block_common_includes.tlc"

%% Function: BlockTypeSetup ===============================================
%function BlockTypeSetup(block, system) void

  %% Ensure required header files are included
  %<ArduinoCommonBlockTypeSetup(block, system)>
  
%endfunction

%% Function: BlockInstanceSetup ===========================================
%%
%function BlockInstanceSetup(block, system) void
  %%
  %<LibBlockSetIsExpressionCompliant(block)>
  %%
%endfunction

%% Function: Outputs ======================================================
%%
%function Outputs(block, system) Output

  %if !SLibCodeGenForSim()
    %assign y2_val = LibBlockOutputSignal(1, "", "", 0)
    %assign y1_dim = LibBlockOutputSignalWidth(0)
    %assign ytname = LibBlockOutputSignalDataTypeName(0,"")
    %assign y1_ptr = LibBlockOutputSignalAddr(0, "", "", 0)
    %assign Port = SFcnParamSettings.Port

    %if y1_dim == 1
        %if ISEQUAL(ytname,"uint8_T")
        %assign y1_val = LibBlockOutputSignal(0, "", "", 0)
        if(%<Port>.available() > 0){
            %<y1_val> = %<Port>.read();
            %<y2_val> = 0;
        }
        else{
            %<y2_val> = 1;
        }
        %else
        if(%<Port>.available() >= ((int) sizeof(%<ytname>)) ){
            /* Read each byte from %<Port> */
            for (size_t j = 0; j < sizeof(%<ytname>); j++) {
                ((uint8_T*) %<y1_ptr>)[j] = %<Port>.read();
            }
            %<y2_val> = 0;
        }
        else{
            %<y2_val> = 1;
        }
        %endif
    %else
    {
        size_t i;
        %if ISEQUAL(ytname,"uint8_T")
        for(i = 0U; i < %<y1_dim>; i++) {
            if(%<Port>.available() > 0){
                (%<y1_ptr>)[i] = %<Port>.read();
            }
            else{
                break;  /* Requested data not available */
            }
        }
        %else
        for(i = 0U; i < %<y1_dim>; i++){
            if(%<Port>.available() >= ((int) sizeof(%<ytname>)) ){
                /* Read each byte from %<Port> */
                for (size_t j = 0; j < sizeof(%<ytname>); j++) {
                    ((uint8_T*) (%<y1_ptr> + i))[j] = %<Port>.read();
                }
            }
            else{
                break;  /* Requested data not available */
            }
        }
        %endif
        %<y2_val> = %<y1_dim> - i;    /* Write what is missing */
    }
    %endif
    
  %endif

%endfunction

%% Function: BlockOutputSignal ============================================
%%
%function BlockOutputSignal(block,system,portIdx,ucv,lcv,idx,retType) void
  %%
  %assign p1_val = CAST("Number", LibBlockParameterValue(p1,0)) - 1
  %if p1_val == 0
    %assign Serial = "Serial"
  %else
    %assign Serial = "Serial%<p1_val>" 
  %endif
  %switch retType
    %case "Signal"
      %if portIdx == 0
        %return "%<Port>.read()"
      %else
        %assign errTxt = "Block output port index not supported: %<portIdx>"
        %<LibBlockReportError(block,errTxt)>
      %endif
    %default
      %assign errTxt = "Unsupported return type: %<retType>"
      %<LibBlockReportError(block,errTxt)>
  %endswitch
  %%
%endfunction

%% [EOF]
