%% File : sfunar_serialRead.tlc
%%
%% Description: 
%%   Code generation file for sfunar_serialRead
%%

%implements sfunar_serialRead "C"

%include "block_common_includes.tlc"

%% Function: BlockTypeSetup ===============================================
%function BlockTypeSetup(block, system) void

  %% Ensure required header files are included
  %<ArduinoCommonBlockTypeSetup(block, system)>
  
%endfunction

%% Function: BlockInstanceSetup ===========================================
%%
%function BlockInstanceSetup(block, system) void
  %%
  %<LibBlockSetIsExpressionCompliant(block)>
  %%
%endfunction

%% Function: Outputs ======================================================
%%
%function Outputs(block, system) Output

  %if !SLibCodeGenForSim()
    %assign y2_val = LibBlockOutputSignal(1, "", "", 0)
    %assign y1_dim = LibBlockOutputSignalWidth(0)
    %assign p1_val = CAST("Number", LibBlockParameterValue(p1,0)) - 1
    %if p1_val == 0
      %assign Serial = "Serial"
    %else
      %assign Serial = "Serial%<p1_val>" 
    %endif
    %%
    if (%<Serial>.available() >= %<y1_dim>) {
      %if y1_dim == 1
      %assign y1_val = LibBlockOutputSignal(0, "", "", 0)
      int16_T %<y1_val>_tmp = %<Serial>.read();
      if (%<y1_val>_tmp < 0) %<y2_val> = false;
      else { 
          %<y1_val> = %<y1_val>_tmp; 
          %<y2_val> = true; 
      }
      %else
      %assign y1_ptr = LibBlockOutputSignalAddr(0, "", "", 0)
      if (%<Serial>.readBytes((char*) %<y1_ptr>, (uint32_T) %<y1_dim>) == %<y1_dim>) %<y2_val> = true;
      else %<y2_val> = false; 
      %endif
    } else {
      %<y2_val> = false;
    }
  %endif

%endfunction

%% Function: BlockOutputSignal ============================================
%%
%function BlockOutputSignal(block,system,portIdx,ucv,lcv,idx,retType) void
  %%
  %assign p1_val = CAST("Number", LibBlockParameterValue(p1,0)) - 1
  %if p1_val == 0
    %assign Serial = "Serial"
  %else
    %assign Serial = "Serial%<p1_val>" 
  %endif
  %switch retType
    %case "Signal"
      %if portIdx == 0
        %return "%<Serial>.read()"
      %else
        %assign errTxt = "Block output port index not supported: %<portIdx>"
        %<LibBlockReportError(block,errTxt)>
      %endif
    %default
      %assign errTxt = "Unsupported return type: %<retType>"
      %<LibBlockReportError(block,errTxt)>
  %endswitch
  %%
%endfunction

%% [EOF]
