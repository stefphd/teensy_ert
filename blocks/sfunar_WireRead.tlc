%% File : sfunar_WireRead.tlc
%%
%% Description: 
%%   Code generation file for sfunar_%<Port>Read
%%
%% Copyright 2013-2014 The MathWorks, Inc.
%%

%implements sfunar_WireRead "C"

%include "block_common_includes.tlc"

%% Function: BlockTypeSetup ===============================================
%function BlockTypeSetup(block, system) void

    %% Ensure required header files are included
    %<ArduinoCommonBlockTypeSetup(block, system)>
    
%endfunction


%% Function: Outputs ======================================================
%%
%function Outputs(block, system) Output

  %if !SLibCodeGenForSim()
    %assign Address = LibBlockParameter(p1, "", "", 0)     
    %assign Master  = SFcnParamSettings.Master
    %assign Size    = SFcnParamSettings.Size
    %assign Command = SFcnParamSettings.Command
    %assign Status  = LibBlockOutputSignal(1, "", "", 0)
    %assign Port = SFcnParamSettings.Port
    %assign y1_ptr = LibBlockOutputSignalAddr(0, "", "", 0)
    %assign ytname = LibBlockOutputSignalDataTypeName(0,"")

    %if Master == 1             %% Master only
        %if SIZE(Command, 1) != 0
        /* Send command to slave */
        %<Port>.beginTransmission(%<Address>);
        %foreach i=SIZE(Command, 1)
            %<Port>.write((uint8_t)%<Command[i]>);
        %endforeach 
        %<Port>.endTransmission();
        %endif

        %<Port>.requestFrom(%<Address>, (size_t) (%<Size> * sizeof(%<ytname>)));    /* request %<Size>*sizeof(%<ytname>) bytes from slave device %<Address> */
    %endif

    %if Size == 1
        %if ISEQUAL(ytname,"uint8_T")
        %assign y1_val = LibBlockOutputSignal(0, "", "", 0)
        if(%<Port>.available() > 0){
            %<y1_val> = %<Port>.read();
            %<Status> = 0;
        }
        else{
            %<Status> = 1;
        }
        %else
        if(%<Port>.available() >= ((int) sizeof(%<ytname>)) ){
            /* Read each byte from %<Port> */
            for (size_t j = 0; j < sizeof(%<ytname>); j++) {
                ((uint8_T*) %<y1_ptr>)[j] = %<Port>.read();
            }
            %<Status> = 0;
        }
        else{
            %<Status> = 1;
        }
        %endif
    %else
    {
        size_t i;
        %if ISEQUAL(ytname,"uint8_T")
        for(i = 0U; i < %<Size>; i++) {
            if(%<Port>.available() > 0){
                (%<y1_ptr>)[i] = %<Port>.read();
            }
            else{
                break;  /* Requested data not available */
            }
        }
        %else
        for(i = 0U; i < %<Size>; i++){
            if(%<Port>.available() >= ((int) sizeof(%<ytname>)) ){
                /* Read each byte from %<Port> */
                for (size_t j = 0; j < sizeof(%<ytname>); j++) {
                    ((uint8_T*) (%<y1_ptr> + i))[j] = %<Port>.read();
                }
            }
            else{
                break;  /* Requested data not available */
            }
        }
        %endif
        %<Status> = %<Size> - i;    /* Write what is missing */
    }
    %endif

  %endif

%endfunction

%% [EOF]
