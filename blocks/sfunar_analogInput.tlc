%% File : sfunar_analogInput.tlc
%%
%% Description: 
%%   Code generation for sfunar_analogInput
%%

%implements sfunar_analogInput "C"

%include "block_common_includes.tlc"

%% Function: BlockTypeSetup ===============================================
%function BlockTypeSetup(block, system) void

  %% Ensure required header files are included
  %<ArduinoCommonBlockTypeSetup(block, system)>
  
%endfunction

%% Function: BlockInstanceSetup ===========================================
%%
%function BlockInstanceSetup(block, system) void
  %%
  %<LibBlockSetIsExpressionCompliant(block)>
  %%
%endfunction


%% Function: Outputs ======================================================
%%
%function Outputs(block, system) Output
  %%
%if !SLibCodeGenForSim()
    %if !LibBlockOutputSignalIsExpr(0)
    %assign p1_val = LibBlockParameter(p1, "", "", 0)
    %assign y1_val = LibBlockOutputSignal(0, "", "", 0)
    %%
    %<y1_val> = analogRead( %<p1_val>);
    %endif 
%endif
  %%
%endfunction

%% Function: BlockOutputSignal ============================================
%%
%function BlockOutputSignal(block,system,portIdx,ucv,lcv,idx,retType) void
  %%
  %assign retVal = "0U"
  %if !SLibCodeGenForSim()
      %assign p1_val = LibBlockParameter(p1, "", "", 0)
      %%
      %switch retType
        %case "Signal"
          %if portIdx == 0
            %return "analogRead( %<p1_val>)"
          %else
            %assign errTxt = "Block output port index not supported: %<portIdx>"
            %<LibBlockReportError(block,errTxt)>
          %endif
        %default
          %assign errTxt = "Unsupported return type: %<retType>"
          %<LibBlockReportError(block,errTxt)>
      %endswitch
  %endif
  %return retVal
  %%
%endfunction

%% [EOF]
